@page "/search/{searchTerm}"
@inject HttpClient Http

<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="/">Home</a></li> @* productsearch is called in the home page *@
        <li class="breadcrumb-item active" aria-current="page">Search</li>
    </ol>
</nav>

@if (searchedProducts.Count == 0)
{
    <p> No Products found!! </p>
}
else
{

   <h1> Search results for : @searchTerm</h1>
   <ProductFilter SearchTerm="@searchTerm"></ProductFilter>
   <p> Price @Price</p>
    <div class="row">
        @foreach (var product in searchedProducts)
        {
            <SingleProduct product="product"></SingleProduct>
        }
    </div>

}

@code {
    [Parameter] //I'll be expecting this to be passed to me from the route
    public string searchTerm { get; set; }

    public List<Product> searchedProducts = new List<Product>();

    [Parameter, SupplyParameterFromQuery]
    public int Price { get; set; }

    protected override async Task OnInitializedAsync() //life cycle method
    {
        var prods = await Http.GetFromJsonAsync<List<Product>>("sample-data/products.json");

        //list of all the products

        // Filter based on Name or if the search term is part of the description

        searchedProducts = prods.Where(x => x.Name.ToLower().Contains(searchTerm.ToLower()) ||
         x.Description.ToLower().Contains(searchTerm.ToLower())
        ).ToList();


    }

    protected override void OnParametersSet()  //life cycle method
    {
        var filters = new List<Func<Product, bool>>();  //list of filters using lambda expressions

        if (Price != 0)
        {
            filters.Add(x => x.Price <= Price);
        }
        if (filters.Any())
        {
            searchedProducts = searchedProducts.Where(product => filters.All(filter => filter(product))).ToList();
        }


    }
}
