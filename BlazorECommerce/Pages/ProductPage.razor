@page "/products"
@inject HttpClient Http
@inject IProduct _productService
@inject NavigationManager navigationManager
@using System.Globalization;
<div class="row">

    <div class="col-4">
        <AddProducts  Id="@guid" OnAddProduct="AddProduct"></AddProducts>
    </div>

    <div class="col-8">
        <div class="row">
            @foreach (var product in products)
            {
                <SingleProduct product="product" OnRemoveProduct= "RemoveProduct" OnEditProduct="EditProduct"></SingleProduct>
            }
        </div>
    </div>
</div>

@code {
    public List<Product> products = new List<Product>();

    public Guid guid { get; set; }
    // public Product editedProduct;
    protected override async Task OnInitializedAsync()
    {

        //call api to get the products to display

        // var productSaved = await Http.GetFromJsonAsync<List<Product>>("sample-data/products.json");
        // if (productSaved.Any())
        // {
        //     products = productSaved;
        // }
        var productSaved = await _productService.GetProducts();
        if (productSaved.Any())
        {
            products = productSaved;
        }

    }

    public async Task AddProduct(Product newproduct)
    {
        //newproduct.ProductId = products.Count + 1;
        // var existingProduct = products.Find(p => p.ProductId == newproduct.ProductId);
        // if (existingProduct == null)
        // {
        //     products.Add(newproduct);
        // }
        // existingProduct.ProductName = newproduct.ProductName;
        // existingProduct.ProductDescription = newproduct.ProductDescription;
        // existingProduct.ProductPrice = newproduct.ProductPrice;
        // existingProduct.Stock = newproduct.Stock;
        // existingProduct.CreatedDate = newproduct.CreatedDate;
        // existingProduct.Availability = newproduct.Availability;
        // existingProduct.ProductImages = newproduct.ProductImages;
        ProductRequestDto theProduct = new ProductRequestDto()
            {
                ProductName = newproduct.ProductName,
                ProductDescription=newproduct.ProductDescription,
                ProductPrice = newproduct.ProductPrice,
                Stock = newproduct.Stock,
                CreatedDate= newproduct.CreatedDate,
                Availability=newproduct.Availability,
                ProductImages = newproduct.productImagesDtos
    };

        var existingProduct = products.Find(p => p.ProductId == newproduct.ProductId);

        if (existingProduct == null)
        {

            var res = await _productService.AddProduct(theProduct);
            navigationManager.NavigateTo("/");
        }


    }

    public async Task RemoveProduct(Product product)
    {
        //products.Remove(product);
        Console.WriteLine(product.ProductName);
        var res = await _productService.DeleteProduct(product.ProductId);
        products.Remove(product);
    }
    
    public void EditProduct(Product product)
    {

         guid = product.ProductId;
        // editedProduct = product;

    }
}
